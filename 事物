2017年1月20日19:05:35

事物
 执行
 127.0.0.1:6379> multi
OK
127.0.0.1:6379> set age 3
QUEUED
127.0.0.1:6379> set age2 3
QUEUED
127.0.0.1:6379> get age2
QUEUED
127.0.0.1:6379> exec
1) OK
2) OK
3) "3"
 
 取消
127.0.0.1:6379> multi
OK
127.0.0.1:6379> set bb 1
QUEUED
127.0.0.1:6379> set cc 2
QUEUED
127.0.0.1:6379> discard
OK
127.0.0.1:6379> get cc
(nil)
127.0.0.1:6379> get bb
(nil)


Redis  乐观锁实例：假设有一个 age 的 key，我们开 2 个 session 来对 age 进行赋值操作，我
们来看一下结果如何。
用户1操作 session 1
(1)第 1 步
redis 127.0.0.1:6379> get age
"10"
redis 127.0.0.1:6379> watch age
OK
redis 127.0.0.1:6379> multi
OK
redis 127.0.0.1:6379>
 
用户2操作 session 2
(2)第 2 步
redis 127.0.0.1:6379> set age 30
OK
redis 127.0.0.1:6379> get age
"30"
redis 127.0.0.1:6379>

用户1操作 session 1
(3)第 3 步
redis 127.0.0.1:6379> set age 20
QUEUED
redis 127.0.0.1:6379> exec
(nil)
redis 127.0.0.1:6379> get age
"30"
redis 127.0.0.1:6379>
从以上实例可以看到在
第一步，Session 1 还没有来得及对 age 的值进行修改
第二步，Session 2 已经将 age 的值设为 30
第三步，Session 1 希望将 age 的值设为 20，但结果一执行返回是 nil，说明执行失败，之后
我们再取一下 age 的值是 30，这是由于 Session 1 中对 age 加了乐观锁导致的。
watch 命令会监视给定的 key,当 exec 时候如果监视的 key 从调用 watch 后发生过变化，则整
个事务会失败。也可以调用 watch 多次监视多个 key.这 样就可以对指定的 key 加乐观锁了。
注意 watch 的 key 是对整个连接有效的，事务也一样。如果连接断开，监视和事务都会被自
动清除。当然了 exec,discard,unwatch 命令都会清除连接中的所有监视。


redis 的事务实现是如此简单，当然会存在一些问题。第一个问题是 redis 只能保证事务的每
个命令连续执行，但是如果事务中的一个命令失败了，并不回滚其他命令，比如使用的命令
类型不匹配。下面将以一个实例的例子来说明这个问题:
redis 127.0.0.1:6379> get age
"30"
redis 127.0.0.1:6379> get name

"HongWan"
redis 127.0.0.1:6379> multi
OK
redis 127.0.0.1:6379> incr age
QUEUED
redis 127.0.0.1:6379> incr name
QUEUED
redis 127.0.0.1:6379> exec
1) (integer) 31
2) (error) ERR value is not an integer or out of range
redis 127.0.0.1:6379> get age
"31"
redis 127.0.0.1:6379> get name
"HongWan"
redis 127.0.0.1:6379>
从这个例子中可以看到，age 由于是个数字，那么它可以有自增运算，但是 name 是个字符
串，无法对其进行自增运算，所以会报错，如果按传统关系型数据库的思路来讲，整个事务
都会回滚，但是我们看到 redis 却是将可以执行的命令提交了，所以这个现象对于习惯于关
系型数据库操作的朋友来说是很别扭的，这一点也是 redis 今天需要改进的地方
